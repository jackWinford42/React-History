{"ast":null,"code":"var _jsxFileName = \"/home/jw/Programs/SpringBoard/react-jokes-classes/src/JokeList.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\nclass JokeList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: []\n    };\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n    this.getJokes = this.getJokes.bind(this);\n  }\n  /* get jokes if there are no jokes */\n\n\n  componentDidMount() {\n    //this.getJokes = this.getJokes.bind(this);\n    if (this.state.jokes.length === 0) {\n      getJokes.bind(this);\n    }\n  }\n  /* empty joke list and then call getJokes */\n\n\n  generateNewJokes() {\n    this.setState({\n      jokes: []\n    });\n  }\n  /* change vote for this id by delta (+1 or -1) */\n\n\n  vote(id, delta) {\n    this.setState(jokes => jokes.map(j => j.id === id ? { ...j,\n      votes: j.votes + delta\n    } : j));\n  }\n  /* render: either loading spinner or list of sorted jokes. */\n\n\n  render() {\n    if (this.state.jokes.length) {\n      let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"JokeList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: this.generateNewJokes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }, \"Get New Jokes\"), sortedJokes.map(j => /*#__PURE__*/React.createElement(Joke, {\n        text: j.joke,\n        key: j.id,\n        id: j.id,\n        votes: j.votes,\n        vote: this.vote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      })));\n    }\n\n    return null;\n  }\n\n}\n\nexport default JokeList; // function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n//   /* get jokes if there are no jokes */\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n//   /* empty joke list and then call getJokes */\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n//   /* change vote for this id by delta (+1 or -1) */\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n//   /* render: either loading spinner or list of sorted jokes. */\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n//   return null;\n// }","map":{"version":3,"sources":["/home/jw/Programs/SpringBoard/react-jokes-classes/src/JokeList.js"],"names":["React","axios","Joke","JokeList","Component","constructor","props","state","jokes","generateNewJokes","bind","vote","getJokes","componentDidMount","length","setState","id","delta","map","j","votes","render","sortedJokes","sort","a","b","joke"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,gBAAP;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,IAAL,GAAY,KAAKA,IAAL,CAAUD,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKE,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;AACD;AAED;;;AAEAG,EAAAA,iBAAiB,GAAG;AAElB;AACA,QAAI,KAAKN,KAAL,CAAWC,KAAX,CAAiBM,MAAjB,KAA4B,CAAhC,EAAmC;AACjCF,MAAAA,QAAQ,CAACF,IAAT,CAAc,IAAd;AACD;AACF;AAED;;;AAEAD,EAAAA,gBAAgB,GAAG;AACjB,SAAKM,QAAL,CAAc;AAAEP,MAAAA,KAAK,EAAE;AAAT,KAAd;AACD;AAED;;;AAEAG,EAAAA,IAAI,CAACK,EAAD,EAAKC,KAAL,EAAY;AACd,SAAKF,QAAL,CAAcP,KAAK,IACjBA,KAAK,CAACU,GAAN,CAAUC,CAAC,IAAKA,CAAC,CAACH,EAAF,KAASA,EAAT,GAAc,EAAE,GAAGG,CAAL;AAAQC,MAAAA,KAAK,EAAED,CAAC,CAACC,KAAF,GAAUH;AAAzB,KAAd,GAAiDE,CAAjE,CADF;AAGD;AAED;;;AACAE,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKd,KAAL,CAAWC,KAAX,CAAiBM,MAArB,EAA6B;AAC3B,UAAIQ,WAAW,GAAG,CAAC,GAAG,KAAKf,KAAL,CAAWC,KAAf,EAAsBe,IAAtB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACL,KAAF,GAAUI,CAAC,CAACJ,KAAjD,CAAlB;AAEA,0BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAQ,QAAA,SAAS,EAAC,kBAAlB;AAAqC,QAAA,OAAO,EAAE,KAAKX,gBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAKGa,WAAW,CAACJ,GAAZ,CAAgBC,CAAC,iBAChB,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,CAAC,CAACO,IAAd;AAAoB,QAAA,GAAG,EAAEP,CAAC,CAACH,EAA3B;AAA+B,QAAA,EAAE,EAAEG,CAAC,CAACH,EAArC;AAAyC,QAAA,KAAK,EAAEG,CAAC,CAACC,KAAlD;AAAyD,QAAA,IAAI,EAAE,KAAKT,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CALH,CADF;AAWD;;AAED,WAAO,IAAP;AACD;;AApDoC;;AAuDvC,eAAeR,QAAf,C,CAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\nclass JokeList extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { jokes: [] };\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n    this.getJokes = this.getJokes.bind(this);\n  }\n\n  /* get jokes if there are no jokes */\n\n  componentDidMount() {\n\n    //this.getJokes = this.getJokes.bind(this);\n    if (this.state.jokes.length === 0) {\n      getJokes.bind(this);\n    }\n  }\n\n  /* empty joke list and then call getJokes */\n\n  generateNewJokes() {\n    this.setState({ jokes: [] });\n  }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  vote(id, delta) {\n    this.setState(jokes =>\n      jokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n    );\n  }\n\n  /* render: either loading spinner or list of sorted jokes. */\n  render() {\n    if (this.state.jokes.length) {\n      let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n    \n      return (\n        <div className=\"JokeList\">\n          <button className=\"JokeList-getmore\" onClick={this.generateNewJokes}>\n            Get New Jokes\n          </button>\n    \n          {sortedJokes.map(j => (\n            <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={this.vote} />\n          ))}\n        </div>\n      );\n    }\n  \n    return null;\n  }\n}\n\nexport default JokeList;\n\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n\n//   /* get jokes if there are no jokes */\n\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n  \n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n//   /* empty joke list and then call getJokes */\n\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  \n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n  \n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n\n//   return null;\n\n// }"]},"metadata":{},"sourceType":"module"}